# Extract the 3rd imputed dataset.
c3 <- complete(imp, 3)
# Shows us all 25 obsevations have no missing variables [obviously since we imputed them..]
md.pattern(c3)
# Creates single VERTICALLY STACKED dataframe for all 5 imputations.
c.long <- complete(imp, "long")
c.long
# Creates a single HORIZONTALLY STACKED dataframe for all 5 imputations. NOTE thi is essentially same as "long" but transposed.
c.broad <- complete(imp, "broad")
c.broad
c.huge <- complete(imp, "all")
c.huge
imp <- mice(airquality, method = "mean", m = 1,
maxit = 1, print = FALSE)
airquality2 <- cbind(complete(imp),
r.Ozone = is.na(airquality[, "Ozone"]))
fit <- lm(Wind ~ Ozone + r.Ozone, data = airquality2)
complete(imp)
help(approxfun)
airquality
complete(imp)
mean(Ozone)
mean(airquality$Ozone)
mean(airquality$Ozone, na.rm == TRUE)
help(mean)
mean(airquality$Ozone, na.rm =FALSE)
mean(airquality$Ozone, na.rm = TRUE)
complete(imp)
mean(airquality$Solar.R, na.rm = TRUE)
# Impute the airquality dataset, using observed mean as the fixed imputation value.
imp <- mice(airquality, method = "mean", m = 1,
maxit = 1, print = FALSE)
# add column to airquality dataset indicating whether Ozone value is missing or not.
airquality2 <- cbind(complete(imp),
r.Ozone = is.na(airquality[, "Ozone"]))
# apply multiple linear regression
fit <- lm(Wind ~ Ozone + r.Ozone, data = airquality2)
complete(imp)
fit
airquality2
knitr::opts_chunk$set(echo = TRUE)
airquality
# Impute the airquality dataset, using observed mean as the fixed imputation value.
imp <- mice(airquality, method = "mean", m = 1,
maxit = 1, print = FALSE)
# add column to airquality dataset indicating whether Ozone value is missing or not.
airquality2 <- cbind(complete(imp),
r.Ozone = is.na(airquality[, "Ozone"]))
# apply multiple linear regression
fit <- lm(Wind ~ Ozone + r.Ozone, data = airquality2)
airquality2
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(tidyverse))
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed"))
airquality2 <- tidyr::fill(airquality_indicator, Ozone)
head(airquality2, 30) %>% ggplot(aes(x = Day,y= Ozone, color = imputation_indicator)) +
geom_line() +
geom_point() +
labs(y = "ozone  (ppb)",
x = "Day Number")
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(tidyverse))
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed"))
airquality2 <- tidyr::fill(airquality_indicator, Ozone)
head(airquality2, 30) %>% ggplot(aes(x = Day,y= Ozone)) +
geom_line() +
geom_point() +
labs(y = "ozone  (ppb)",
x = "Day Number")
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(tidyverse))
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed"))
airquality2 <- tidyr::fill(airquality_indicator, Ozone)
head(airquality2, 30) %>% ggplot(aes(x = Day,y= Ozone, )) +
geom_line() +
geom_point(aes(color = imputation_indicator)) +
labs(y = "ozone  (ppb)",
x = "Day Number")
airquality_filled <- tidyr::fill(airquality, Ozone)
airquality_filled %>% ggplot(aes(x = Day,y= Ozone)) +
geom_point() +
labs(y = "ozone  (ppb)",
x = "Day Number")
airquality
airquality_filled
# add a missingness indicator for the Ozone variable using the airquality dataset.
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed"))
# Using the tidyr package, impute Ozone NA values with the previous observed value
airquality2 <- tidyr::fill(airquality_indicator, Ozone)
head(airquality2, 30) %>% ggplot(aes(x = Day,y= Ozone, )) +
geom_line() +
geom_point(aes(color = imputation_indicator)) +
labs(y = "ozone  (ppb)",
x = "Day Number")
help(fill)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(tidyverse))
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed"))
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed"))
airquality_indicator
help(replace_na)
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed")) %>% replace_na(Ozone, Ozone[1])
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed")) %>% replace_na(airquality_indicator$Ozone, airquality_indicator$Ozone[1])
airquality_indicator$Ozone
(airquality_indicator$Ozone)[1]
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed")) %>% replace_na(airquality_indicator$Ozone, (airquality_indicator$Ozone)[1])
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed")) %>% replace_na(airquality_indicator$Ozone, 41)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(tidyverse))
(airquality_indicator$Ozone) %>% dplyr::mutate(x = replace_na(x, 0))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(tidyverse))
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed"))
airquality_indicator$Ozone %>% replace_na((airquality_indicator$Ozone)[1])
airquality_indicator
airquality_indicator
airquality_indicator$Ozone %>% replace_na((airquality_indicator$Ozone)[1])
baseline_Ozone = (airquality$Ozone)[1]
baseline_Solar.R = (airquality$Solar.R)[1]
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed")) %>% replace_na(list(Ozone = baseline_Ozone, Solar.R = baseline_Solar.R))
airquality_indicator
airquality
# Store baseline (first observation) of relevant variable [Ozone in this case]
baseline_Ozone = (airquality$Ozone)[1]
# Impute missing values with baseline observation as well as adding ozone missingness indicator variable.
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed"))
%>% replace_na(list(Ozone = baseline_Ozone, Solar.R = baseline_Solar.R))
# Store baseline (first observation) of relevant variable [Ozone in this case]
baseline_Ozone = (airquality$Ozone)[1]
# Impute missing values with baseline observation as well as adding ozone missingness indicator variable.
airquality_indicator <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed")) %>%
replace_na(list(Ozone = baseline_Ozone, Solar.R = baseline_Solar.R))
# Store baseline (first observation) of relevant variable [Ozone in this case]
baseline_Ozone = (airquality$Ozone)[1]
# Impute missing values with baseline observation as well as adding ozone missingness indicator variable.
airquality_LOCF <- airquality %>%
mutate(imputation_LOCF = if_else(is.na(Ozone), "imputed", "observed")) %>%
replace_na(list(Ozone = baseline_Ozone, Solar.R = baseline_Solar.R))
head(airquality_LOCF, 30) %>% ggplot(aes(x = Day,y= Ozone, color = imputation_indicator)) +
geom_line() +
geom_point() +
labs(y = "ozone  (ppb)",
x = "Day Number")
airquality_LOCF
# Store baseline (first observation) of relevant variable [Ozone in this case]
baseline_Ozone = (airquality$Ozone)[1]
# Impute missing values with baseline observation as well as adding ozone missingness indicator variable.
airquality_LOCF <- airquality %>%
mutate(imputation_indicator = if_else(is.na(Ozone), "imputed", "observed")) %>%
replace_na(list(Ozone = baseline_Ozone, Solar.R = baseline_Solar.R))
head(airquality_LOCF, 30) %>% ggplot(aes(x = Day,y= Ozone, color = imputation_indicator)) +
geom_line() +
geom_point() +
labs(y = "ozone  (ppb)",
x = "Day Number")
head(airquality_LOCF, 30) %>% ggplot(aes(x = Day,y= Ozone)) +
geom_line() +
geom_point( aes(color = imputation_indicator)) +
labs(y = "ozone  (ppb)",
x = "Day Number")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics(images/multiple_imputation.png)
knitr::include_graphics("images/multiple_imputation.png")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(tidyverse))
imp <- mice(airquality, seed = 1, m = 20, print = FALSE)
imp <- mice(airquality, seed = 1, m = 20)
# Apply multiple imputation to airquality to create m = 20 datasets
imp <- mice(airquality, seed = 1, m = 20, print = FALSE)
# Fits multiple linear regression model to predict Ozone using Wind, Temp, Solar.R as predictor vars
fit <- with(imp, lm(Ozone ~ Wind + Temp + Solar.R))
# pools the twenty datasets' estimated parameters [B_0, B_1, B_2, B_3]
summary(pool(fit))
fit
# [step 1 above]
incomplete_data <- airquality
# [Step 2 above] Apply multiple imputation to airquality to create m = 20 datasets
imp <- mice(incomplete_data, seed = 1, m = 20, print = FALSE)
# [step 3 above] Fits multiple linear regression model to predict Ozone using Wind, Temp, Solar.R as predictor vars
fit <- with(imp, lm(Ozone ~ Wind + Temp + Solar.R))
# [step 4 above] pools the twenty datasets' estimated parameters [B_0, B_1, B_2, B_3]
summary(pool(fit))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lavaan))
complete(fit)
# First inspect initial dataset
data <- airquality[, c("Ozone", "Solar.R", "Wind")]
head(data)
# Compute means for each column using observed values
mu <- colMeans(data, na.rm = TRUE)
mu
# Compute covariances for each variable, generating a covariance matrix.
cv <- cov(data, use = "pairwise")
cv
fit <- lavaan("Ozone ~ 1 + Wind + Solar.R
Ozone ~~ Ozone",
sample.mean = mu, sample.cov = cv,
sample.nobs = sum(complete.cases(data)))
help(fit)
coef(fit)[c(2:3)]
help(fit)
help("lavaan"
)
fit.fitteed
fit.fitted
fitted(fit)
fitted.values(fit)
show(fit)
Data(fit)
fit.Data
fit
summary(fit)
str(fit)
coef(fit)
fit
fit$
data
View(fit)
data
View(fit)
fit.Data
fit$Data
fit
Data(fit)
fit@Data
fit@Data
fit@Fit
fit.fitted.values
summary(fit)
# Impute the airquality dataset, using observed mean as the fixed imputation value.
imp <- mice(airquality, method = "mean", m = 1,
maxit = 1, print = FALSE)
# add column to airquality dataset indicating whether Ozone value is missing or not.
airquality2 <- cbind(complete(imp),
r.Ozone = is.na(airquality[, "Ozone"]))
# apply multiple linear regression
fit <- lm(Wind ~ Ozone + r.Ozone, data = airquality2)
# Note how airquality2 now has 7 variables with the addition of the Ozone indicator.
head(airquality2)
summary(fit)
fit$coefficients
head(airquality2), fit$coefficients
# Impute the airquality dataset, using observed mean as the fixed imputation value.
imp <- mice(airquality, method = "mean", m = 1,
maxit = 1, print = FALSE)
# add column to airquality dataset indicating whether Ozone value is missing or not.
airquality2 <- cbind(complete(imp),
r.Ozone = is.na(airquality[, "Ozone"]))
# apply multiple linear regression
fit <- lm(Wind ~ Ozone + r.Ozone, data = airquality2)
# Note how airquality2 now has 7 variables with the addition of the Ozone indicator.
head(airquality2)
fit$coefficients
citation(package = "mice")
knitr::opts_chunk$set(echo = TRUE)
data <- na.omit(airquality)
# MCAR - fertig
prop.m = .1  # 10% missingness
mcar   = runif(length(data[,1]), min=0, max=1)
Wind.mcar = ifelse(mcar<prop.m, NA, data$Wind)
data_mcar <- cbind(subset(data, select = -c(Wind)), Wind.mcar)
#MNAR
data_nmar <- data
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)), NA, data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data <- na.omit(airquality)
# MCAR - fertig
prop.m = .1  # 10% missingness
mcar   = runif(length(data[,1]), min=0, max=1)
Wind.mcar = ifelse(mcar<prop.m, NA, data$Wind)
data_mcar <- cbind(subset(data, select = -c(Wind)), Wind.mcar)
data
data_mcar
data <- na.omit(airquality)
data
data <- na.omit(airquality)
mcar   = runif(length(data[,1]), min=0, max=1)
help(runif)
data[,1]
View(data)
length(data[,1])
Wind.mcar = ifelse(mcar<prop.m, NA, data$Wind)
-c(Wind)
subset(data, select = -c(Wind))
data <- na.omit(airquality)
# MCAR - fertig
prop.m = .1  # 10% missingness
# generates uniform distn btwn 0 and 1 111 times.
mcar   = runif(length(data[,1]), min=0, max=1)
# generate prop.m %-age missingness in Wind var
Wind.mcar = ifelse(mcar<prop.m, NA, data$Wind)
# dataset that selects everything EXCEPT Wind column from dataframe, and then adds Wind.mcar in place of Wind.
data_mcar <- cbind(subset(data, select = -c(Wind)), Wind.mcar)
data_mcar
#MNAR
data_nmar <- data
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)), NA, data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data
data <- na.omit(airquality)
data_nmar <- data
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
higher
median(data_nmar$Wind)
typeof(higher)
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)), NA, data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
data_nmar <- data
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
data <- na.omit(airquality)
data_nmar <- data
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
higher
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
ifelse(sample(c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)), NA, data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
help(sample)
sample(c(T, F)
sample(c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)
sample(c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)
)
length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
)
length(higher)
typeof(sample(c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)))
sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
)
sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9))
temp = sample(
c(T, F), 1, replace=T, prob=c(0.1, 0.9))
temp
ifelse(temp, print("success"), print("fail"))
typeof(temp)
temp = T
temp
ifelse(temp, print("success"), print("fail"))
typeof(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)))
#MNAR
# recall data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
# "sample" here takes a sample of T (0.1 prob) / F (0.9 prob) with replacement of size equal to "higher". Since sample outputs a logical vector, TRUE corresponds to if statement being satisfied , FALSE corresponds to if statement not being satisfied.
# Thus, TRUE => replace greater_than_median vals with NA, FALSE => no change.
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)),
NA,
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data_nmar
data <- na.omit(airquality)
# recall data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
higher
data_nmar$Wind
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
median(data_nmar$Wind)
#MNAR
# recall data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
# "sample" here takes a sample of T (0.1 prob) / F (0.9 prob) with replacement of size equal to "higher". Since sample outputs a logical vector, TRUE corresponds to if statement being satisfied , FALSE corresponds to if statement not being satisfied.
# Thus, TRUE => replace greater_than_median vals with NA, FALSE => no change.
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)),
NA,
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
higher
#MNAR
# recall data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
# "sample" here takes a sample of T (0.1 prob) / F (0.9 prob) with replacement of size equal to "higher". Since sample outputs a logical vector, TRUE corresponds to if statement being satisfied , FALSE corresponds to if statement not being satisfied.
# Thus, TRUE => replace greater_than_median vals with NA, FALSE => no change.
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)),
NA,
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
#MNAR
data <- na.omit(airquality)
# recall data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
# "sample" here takes a sample of T (0.1 prob) / F (0.9 prob) with replacement of size equal to "higher". Since sample outputs a logical vector, TRUE corresponds to if statement being satisfied , FALSE corresponds to if statement not being satisfied.
# Thus, TRUE => replace greater_than_median vals with NA, FALSE => no change.
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)),
NA,
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
#MNAR
data <- na.omit(airquality)
# recall data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
# "sample" here takes a sample of T (0.1 prob) / F (0.9 prob) with replacement of size equal to "higher". Since sample outputs a logical vector, TRUE corresponds to if statement being satisfied , FALSE corresponds to if statement not being satisfied.
# Thus, TRUE => replace greater_than_median vals with NA, FALSE => no change.
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)),
NA,
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
data_nmar$Wind
data_nmar$Wind
median(data_nmar$Wind)
data_nmar
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)),
NA,
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
#MNAR
data <- na.omit(airquality)
# recall data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
# "sample" here takes a sample of T (0.1 prob) / F (0.9 prob) with replacement of size equal to "higher". Since sample outputs a logical vector, TRUE corresponds to if statement being satisfied , FALSE corresponds to if statement not being satisfied.
# Thus, TRUE => replace greater_than_median vals with NA, FALSE => no change.
# data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(
#   c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)),
#   NA,
#   data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)] = ifelse(sample(c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)), NA, data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)])
data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]
data_nmar
data_nmar$Wind
data <- na.omit(airquality)
# MCAR - fertig
prop.m = .1  # 10% missingness
# generates uniform distn btwn 0 and 1 111 times.
mcar   = runif(length(data[,1]), min=0, max=1)
# generate prop.m %-age missingness in Wind var
Wind.mcar = ifelse(mcar<prop.m, NA, data$Wind)
# dataset that selects everything EXCEPT Wind column from dataframe, and then adds Wind.mcar in place of Wind.
data_mcar <- cbind(subset(data, select = -c(Wind)), Wind.mcar)
data_mcar
#MNAR
data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > mean(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
# "sample" here takes a sample of T (0.1 prob) / F (0.9 prob) with replacement of size equal to "higher". Since sample outputs a logical vector, TRUE corresponds to if statement being satisfied , FALSE corresponds to if statement not being satisfied.
# Thus, TRUE => replace greater_than_median vals with NA, FALSE => no change.
data_nmar$Wind[data_nmar$Wind > mean(data_nmar$Wind)] = ifelse(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.1, 0.9)),
NA,
data_nmar$Wind[data_nmar$Wind > mean(data_nmar$Wind)])
data_nmar$Wind
# This is MNAR because missingness in Wind is dependent on the TRUE Wind variable's mean, which is unknown. Missingness is dependent on information that cannot be obtain without knowing the true values of the data.
#MNAR
data <- na.omit(airquality)
data_nmar <- data
# e.g. if median is 10.0, higher is a double that stores all the observed wind values greater than 10.0
# store data values greater than median as they will be mutated in next step
higher <- data_nmar$Wind[data_nmar$Wind > mean(data_nmar$Wind)]
# lower <- data_nmar$Wind[data_nmar$Wind <= median(data_nmar$Wind)]
# "sample" here takes a sample of T (0.1 prob) / F (0.9 prob) with replacement of size equal to "higher". Since sample outputs a logical vector, TRUE corresponds to if statement being satisfied , FALSE corresponds to if statement not being satisfied.
# Thus, TRUE => replace greater_than_median vals with NA, FALSE => no change.
data_nmar$Wind[data_nmar$Wind > mean(data_nmar$Wind)] = ifelse(sample(
c(T, F), length(data_nmar$Wind[data_nmar$Wind > median(data_nmar$Wind)]), replace=T, prob=c(0.2, 0.8)),
NA,
data_nmar$Wind[data_nmar$Wind > mean(data_nmar$Wind)])
data_nmar$Wind
# This is MNAR because missingness in Wind is dependent on the TRUE Wind variable's mean, which is unknown. Missingness is dependent on information that cannot be obtain without knowing the true values of the data.
